class node{
    public:
int data;
    node* left;
    node* right;
    node(int x){
        data=x;
        left=right=NULL;
    }
};
void preorder(node* root){
    if(!root) return;
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}
void inorder(node* harsh){
    if(!harsh) return;
    
    inorder(harsh->left);
    cout<<harsh->data<<" ";
    inorder(harsh->right);
}
void postorder(node* akash){
    if(!akash) return;

    postorder(akash->left);
    postorder(akash->right);
        cout<<akash->data<<" ";
}
void levelorder(node* root)
{
    queue<node*> q;
    
    q.push(root);
    
    
    while(q.size())
    {
        node* root = q.front();
        
        if(root->left) q.push(root->left);
        if(root->right) q.push(root->right);
        
        cout<<root->data<<" ";
        q.pop();
    }
}
int main() {
    node *a=new node(1);
    node *b=new node(2);
    node *c=new node(3);
    node *d=new node(4);
    node *e=new node(5);
    node *f=new node(6);
    node *g=new node(7);
    //first tree
    //    a->left=b;
    // a->right=c;
    // b->left=d;
    // b->right=e;
    // c->left=f;
    // c->right=g;
    
    // a->left=b;
    // a->right=f;
    // b->left=c;
    // c->right=d;
    // d->left=g;
    // d->right=e;
    
    a->right=b;
    b->right=c;
    c->right=d;
    d->right=e;
    e->right=f;
    f->right=g;
    cout<<"preorder:  ";
    preorder(a);
    cout<<endl;
     cout<<"inorder:  ";
        inorder(a);
    cout<<endl;
     cout<<"postorder:  ";
    postorder(a);
    cout<<endl;
    cout<<"levelorder: ";
    levelorder(a);
}
